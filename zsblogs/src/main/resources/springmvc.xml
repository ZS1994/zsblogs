<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<mvc:annotation-driven conversion-service="conversionService"/>

	<!-- 
		2019-6-13，张顺
		 以后部署项目的话，需要在这个地方更改一些配置
		1、下载图片的文件保存路径，在springmvc.xml文件中downLoadImg进行配置
		2、tomcat配置的图片文件夹映射，请这样配：<Context docBase="E:/tomcat_imgs/" path="/tomcat_imgs" reloadable="true"/>
		3、爬虫1号的id（可能需要改，目前需要在代码中Constans中进行修改）
		4、jdbc的配置数据库路径，账号密码等
		5、log的配置保存路径
	-->
	<!-- 张顺，2019-6-17，添加这个下载img的工具交由spring管理，因为1，可以灵活更改文件保存路径。2，bean就是单例的，不用编写单例模式。3，不用获取spring上下文获取bean了，省去很多麻烦，代码看起来也更加规范 -->
	<bean id="downloadImg" class="com.zs.tools.DownloadImg">
		<!-- 本地可以D:/software/tomcat_imgs/  服务器上/home/tomcat_imgs/ -->
<!--		<property name="pathRoot" value="/home/tomcat_imgs/"></property>-->
		 <property name="pathRoot" value="D:/software/tomcat_imgs/"></property>
	</bean>
	<context:component-scan base-package="com.zs.controller" />
	
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="dateConverter"/>
            </set>
        </property>
    </bean>
	<mvc:annotation-driven />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	
	<!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>
        <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>


    <!-- 当在web.xml 中   DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
    <mvc:default-servlet-handler/>

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/framework/**" location="/framework/"/>
	
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>

	<context:component-scan base-package="com.sishuok.spring4"/>  
	<mvc:resources mapping="/framework/**" location="/framework/" />
	<mvc:resources mapping="/file/**" location="/file/" />
	<!--配置拦截器, 多个拦截器,顺序执行 -->
    <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
	<mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/api/**" />
	        <mvc:mapping path="/menu/**" />
	        <bean class="com.zs.interceptor.RoleInter"></bean>
	    </mvc:interceptor>  
	</mvc:interceptors>
	
	
	<mvc:default-servlet-handler/>
	
	<!-- API 接口跨域配置 -->
	<!-- 
	<mvc:cors>  
	    <mvc:mapping path="/api/**"/>
	</mvc:cors>
	 -->
	
</beans>